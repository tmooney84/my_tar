To-Do Tuesday 3/3/25


**************Start at line 731 >>> need to pass back struct * to calling function       ./my_tar -xf test.tar

                    ln 690 and 719 call map_file_metadata() fn >>> need to pass struct *


code something like this...

int map_file_metadata(header *f_header, int fd, struct stat *out_stats)
{
    if (fstat(fd, out_stats) == -1)
    {
        return -1;
    }

    switch (f_header->typeflag)
    {
    case '0':
        out_stats->st_mode = (mode_t)0100000 & parse_octal(f_header->mode, sizeof(f_header->mode));
        break;
    case '2':
        out_stats->st_mode = (mode_t)0120000 & parse_octal(f_header->mode, sizeof(f_header->mode));
        break;
    default:
        print_error("Unable to set mode\n");
        break;
    }

    out_stats->st_uid = (unsigned int)parse_octal(f_header->uid, sizeof(f_header->uid));
    out_stats->st_gid = (unsigned int)parse_octal(f_header->gid, sizeof(f_header->gid));
    out_stats->st_size = lseek(fd, 0, SEEK_END);
    out_stats->st_mtime = (time_t)parse_octal(f_header->mtime, sizeof(f_header->mtime));

    return 0;
}










***!!!NEED TO CLOSE FILE DESCRIPTORS THROUGHOUT THE PROGRAM!!!


process_entry:
bugs??? >>> I think the tar file should be able to be extracted with tar

build out -cf 
make sure that it is differentiated from -rt and overwrites everything if the file already exists
***Ensure headers are written as 512-byte blocks (not strings) to preserve NULs

***ensure process_entry() is uses binary not macros for checking file types

build out -rf
make sure that it adds to the end

build out -uf

build out -tf 
-use the ustar a certain location to find tar file
-from there locate the name using standard format

build out -xf

*** start with line 585 and get block counting logic 
in place to then start copying file and return number of 
blocks used by the file??? how to account for the zeroed 
blocks and record...

1) Read header (512 bytes).
2) Extract filename (name field).
3) Check typeflag (if it's '0', it's a file).
4) Create a new file using open(name, O_WRONLY | O_CREAT, mode).
5) Read size bytes from tar and write to the file.
6) Skip padding (to next 512-byte boundary).
7) Restore metadata (mode, timestamps).


***ensure extract_process_entry() is uses binary not macros for checking file types

-use the ustar to build file name
-restore meta data (look to chatgpt list for mode, date modified)